# [[language]]
# name = "typst"
# scope = "source.typst"
# injection-regex = "^typ(st)?$"
# file-types = ["typ"]
# indent = { tab-width = 2, unit = "  " }
# # comment-token = "/*"
# language-servers = [ "typst-lsp" ]
# roots = ["typst.toml"]
# text-width = 100
# rulers = [100]
# soft-wrap.wrap-at-text-width = true

[language-server.typst-lsp]
command = "typst-lsp"

[typst.auto-pairs]
'(' = ')'
'{' = '}'
'[' = ']'
'"' = '"'
'`' = '`'
'$' = '$'

[[grammar]]
name = "typst"
source = { path = "/Users/junaadh/.local/typst" }

[[language]]
name = "markdown"
language-servers = ["marksman", "mdpls"]

[language-server.mdpls]
command = "~/.cargo/bin/mdpls"
config = { markdown.preview.auto = true }

[[language]]
name = "python"
roots = ["pyproject.toml"]
language-servers = ["pyright", "ruff"]
indent = { tab-width = 4, unit = " " }
auto-format = true

[language-server.pyright]
command = "pyright-langserver"
args = ["--stdio"]
# config = { python = { analysis = { typeCheckingMode = "strict" } } }

[language-server.ruff]
command = "ruff-lsp"
config = { settings = { run = "onSave" } }

[[language]]
name = "java"
scope = "source.java"
auto-format = true
injection-regex = "java"
roots = ["pom.xml"]
# comment-token = "//"

[[language]]
name = "cpp"
scope = "source.cpp"
auto-format = true
# comment-token = "//"
file-types = ["cpp", "h"]
indent = { tab-width = 2, unit = ' ' }

[[language]]
name = "rust"
scope = "source.rust"
auto-format = true
# comment-token = "//"
file-types = ["rs"]
indent = { tab-width = 2, unit = ' ' }
# language-servers = [ "rust-analyzer" ]
language-servers = [ "rust-analyzer" ]#, "lsp-rs" ]

[language-server.lsp-rs]
# command = "/Users/junaadh/Developer/rust/lsp-rs/target/debug/lsp-rs"
command = "lsp-rs"

[[language]]
name = "c"
scope = "source.c"
auto-format = true
# comment-token = "//"
file-types = ["c", "h"]
indent = { tab-width = 2, unit = '  ' }
language-servers = ["clangd"]
  
[language-server.rust-analyzer.config.check]
command = "clippy"

[language-server.rust-analyzer.config]
inlayHints.bindingModeHints.enable = true
inlayHints.closingBraceHints.minLines = 10
inlayHints.closureReturnTypeHints.enable = "with_block"
inlayHints.discriminantHints.enable = "fieldless"
inlayHints.lifetimeElisionHints.enable = "skip_trivial"
inlayHints.typeHints.hideClosureInitialization = false
procMacro = { ignored = { leptos_macro = ["server"] } }

[[language]]
name = "toml"
formatter = { command = "taplo", args = ["fmt", "-"]}

[language-server.biome]
command = "biome"
args = ["lsp-proxy"]

[[language]]
name = "typescript"
language-servers = [
  { name = "typescript-language-server", except-features = [
    "format",
  ] },
  "eslint",
  "tailwindcss-ls",
  "emmet-ls",
]
formatter = { command = "biome", args = [
  "format",
  "--stdin-file-path",
  "foo.ts",
  "--indent-style=space",
] }
indent = { tab-width = 2, unit = " " }
auto-format = true

[[language]]
name = "javascript"
language-servers = [
  { name = "typescript-language-server", except-features = [
    "format",
  ] },
  "eslint",
  "tailwindcss-ls",
  "emmet-ls",
]
formatter = { command = "biome", args = [
  "format",
  "--stdin-file-path",
  "foo.js",
  "--indent-style=space",
] }
indent = { tab-width = 2, unit = " " }
auto-format = true

[[language]]
name = "tsx"
language-servers = [
  { name = "typescript-language-server", except-features = [
    "format",
  ] },
  "eslint",
  "tailwindcss-ls",
  "emmet-ls",
]
formatter = { command = "biome", args = [
  "format",
  "--stdin-file-path",
  "foo.tsx",
  "--indent-style=space",
] }
indent = { tab-width = 2, unit = " " }
auto-format = true

[[language]]
name = "jsx"
language-servers = [
  { name = "typescript-language-server", except-features = [
    "format",
  ] },
  "eslint",
  "tailwindcss-ls",
  "emmet-ls",
]
formatter = { command = "biome", args = [
  "format",
  "--stdin-file-path",
  "foo.jsx",
  "--indent-style=space",
] }
indent = { tab-width = 2, unit = " " }
auto-format = true

[[language]]
name = "json"
language-servers = [
  { name = "vscode-json-language-server", except-features = [
    "format",
  ] },
]
formatter = { command = "biome", args = [
  "format",
  "--stdin-file-path",
  "foo.json",
  "--indent-style=space",
] }
indent = { tab-width = 2, unit = " " }
auto-format = true

[language-server.vscode-json-language-server.config]
json = { validate = { enable = true } }
provideFormatter = false

[language-server.vscode-css-language-server.config]
css = { validate = { enable = true } }
scss = { validate = { enable = true } }
less = { validate = { enable = true } }
provideFormatter = true

[[language]]
name = "html"
formatter = { command = "npx", args = ["prettier", "--parser", "html"] }
language-servers = ["vscode-html-language-server", "tailwindcss-ls", "emmet-ls"]

[[language]]
name = "css"
formatter = { command = "npx", args = ["prettier", "--parser", "css"] }
language-servers = ["vscode-css-language-server", "tailwindcss-ls", "emmet-ls"]

[language-server.emmet-ls]
args = ["--stdio"]
command = "emmet-language-server"

[language-server.eslint]
args = ["--stdio"]
command = "vscode-eslint-language-server"

[language-server.eslint.config]
format = true
nodePath = ""
onIgnoredFiles = "off"
packageManager = "npm"
quiet = false
rulesCustomizations = []
run = "onType"
useESLintClass = false
validate = "on"
codeAction = { disableRuleComment = { enable = true, location = "separateLine" }, showDocumentation = { enable = true } }
codeActionOnSave = { mode = "all" }
experimental = {}
problems = { shortenToSingleLine = false }
workingDirectory = { mode = "auto" }

[language-server.tailwindcss-ls]
command = "tailwindcss-language-server"
args = ["--stdio"]
config = {}

[language-server.typescript-language-server.config]
documentFormatting = false
hostInfo = "helix"

[language-server.typescript-language-server.config.typescript.inlayHints]
includeInlayEnumMemberValueHints = true
includeInlayFunctionLikeReturnTypeHints = true
includeInlayFunctionParameterTypeHints = true
includeInlayParameterNameHints = "all"
includeInlayParameterNameHintsWhenArgumentMatchesName = true
includeInlayPropertyDeclarationTypeHints = true
includeInlayVariableTypeHints = true

[language-server.typescript-language-server.config.completions]
completeFunctionCalls = true

[language-server.typescript-language-server.config.javascript.inlayHints]
includeInlayEnumMemberValueHints = true
includeInlayFunctionLikeReturnTypeHints = true
includeInlayFunctionParameterTypeHints = true
includeInlayParameterNameHints = "all"
includeInlayParameterNameHintsWhenArgumentMatchesName = true
includeInlayPropertyDeclarationTypeHints = true
includeInlayVariableTypeHints = true

[[language]]
name = "ocaml"
formatter = { command = "ocamlformat", args = [ "-", "--impl", "--enable-outside-detected-project" ] }
